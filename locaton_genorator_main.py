"""
By: Ori Shadmon
Date: December 2017
Description: The following is the main class of script. A user calls this class to get information 
""" 

import os 
import sys
from get_ip import InfoFromFile_WordPress 
from get_location import InfoFromIP

class LocatonGenoratorMain: 
   def __init__(self, *args):
      """
      Initiate the class with information provided by user 
      :arg: 
         args (sys.argv):list - Valules declared when calling test (shown in _help method) 
      """
      if "--help" in sys.argv: 
         self._help() 
      self._declare_values(values=sys.argv) 

   def _help(self): 
      """
      Method containing info on how to use script"
      """ 
      print("The following assits with generating info regarding"
            +"\n\t--file: WordPress Access Log file            [--file=$HOME/tmp/nginx_logs.txt]"
            +"\n\t--api-key: The Google API Key                [--api-key=aaaBcD123kd-d83c-C83s]"
            +"\n\t--query: what you are looking for            [--query='lunch']"
            +"\n\t--radius: distance (in meters) from location [--radius=0]" 
            +"\n\t--disable-timestamp: remove list of access timestamp from output"
            +"\n\t--disable-coordinates: remove coordinates from output"
            +"\n\t--disable-address: remove address from output"
            +"\n\t--disable-query: remove info relating to near by places from output"
            +"\n\t--help: provides info on how to use script")
      exit(1)

   def _declare_values(self, values): 
      """
      Decleration of class variables, used by the other classes, based 
      on user input
      :args: 
         values:list - user declared values when calling test 
      :class variables: 
         self.file:str - File contianing access logs 
         self.api_key:str - Google API key to query against coordinates 
         self.query:str - String that one searches for 
         self.radius:int - distance from location (in meters) 
         self.timestamp:boolean - declare whether to print timestamps or not 
         self.coordinattes:boolean - declare whether to print coordinates or not
         self.address:boolean - declare whether to print address or not
         self.enable_query:boolean - declare whether to print near by places or not
      """
      self.file='$HOME/tmp/nginx_logs.txt' 
      self.api_key='aaaBcD123kd-d83c-C83s'
      self.query='lunch'
      self.radius=0 
      self.timestamp = True
      self.coordinates = True
      self.address = True
      self.enable_query = True
      for value in values: 
         if value is sys.argv[0]:
            pass
         elif "--file" in value: 
            self.file = value.split("=")[-1]
         elif "--api-key" in value:
            self.api_key = value.split("=")[-1]
         elif "--query" in value: 
            self.query = value.split("=")[-1] 
         elif "--radius" in value: 
            self.radius = value.split("=")[-1]
         elif "--disable-timestamp" in value:
            self.timestamp = False
         elif "--disable-coordinates" in value: 
            self.coordinates = False
         elif "--disable-address" in value: 
            self.address = False
         elif "--disable-query" in value: 
            self.enable_query = False 
      
      self.file = self.file.replace("$HOME", os.getenv("HOME")).replace("$PWD", os.getenv("PWD")).replace("~", os.path.expanduser('~'))

   def _get_ip(self):      
      """
      From file, get IP and timestamp information
      """ 
      f = open(self.file, 'r')
      self.ip_directory = {}
      for line in f.readlines(): 
         iff_w = InfoFromFile_WordPress(line=line)
         ip = iff_w.get_ip() 
         timestamp = iff_w.get_timestamp() 
         if ip in self.ip_directory:
            self.ip_directory[ip]['timestamp'].append(timestamp)
            self.ip_directory[ip]['frequency'] += 1
         else: 
            self.ip_directory[ip] = {'timestamp':[timestamp], 'frequency':1, 'coordinates': None,  'address': None, 'query result': None}
      f.close() 

   def _get_location_info(self): 
      """
      Based on IP, use Google Maps API to generate relevent information
      """
      for ip in self.ip_directory: 
         ifi = InfoFromIP(ip=ip, api_key=self.api_key, query=self.query, radius=self.radius)
         if self.coordinates is True: 
            lat, long = ifi.return_lat_long_values() 
            self.ip_directory[ip]['coordinates'] = (lat, long)
         if self.address is True: 
            self.ip_directory[ip]['address'] = ifi.get_address()
         if self.enable_query is True: 
            self.ip_directory[ip]['query result'] = ifi.get_possible_owners() 

   def _print_ip_directory(self): 
      """
      Replace (raw) information in file (self.file) with information
      generated by the script
      """  
      open(self.file,'w').close()
      f = open(self.file, 'w') 
      sys.stdout = f
      for ip in self.ip_directory.keys():
         output = "%s -\n\tFrequency: %s" % (ip, self.ip_directory[ip]['frequency'])
         if self.timestamp is True: 
            output += "\n\tTimestamps: \n\t\t%s" % self.ip_directory[ip]['timestamp']
         if self.coordinates is True: 
            output += "\n\tCoordinates: %s" % str(self.ip_directory[ip]['coordinates'])
         if self.address is True: 
            output += "\n\tAddress: %s" % self.ip_directory[ip]['address'] 
         output += "\n\tPotential Query Results: \n\t\t%s" % self.ip_directory[ip]['query result']
         print(output)
      f.close() 

   def main(self): 
      """
      Call information when appropriate
      """ 
      self._get_ip() 
      self._get_location_info() 
      self._print_ip_directory() 

if __name__ == '__main__': 
   lgm = LocatonGenoratorMain()
   lgm.main() 

